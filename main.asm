//*****************************************************************************
// Universidad del Valle de Guatemala
// IE2023 Programacion de Microcontroladores
// Autor: Edgar Chavarria 22055
// Proyecto: Proyecto_01_02.asm
// Descripcion: 
// Hardware: ATMega328P
// Created: 3/09/2024 8:15:52 PM
// Author : Samuel
//*****************************************************************************
// ENCABEZADO
//*****************************************************************************
.INCLUDE "M328PDEF.inc"
.equ T1Value = 0xC000 /*0xFFA0*/ 
.def UMIN = R17
.def UMINDEC = R18
.def UHORA = R19
.def UHORADEC = R20
.def MODO = R21
.def MODO2 = R22
.def UDIA = R6
.def UDIADEC = R7
.def UMES = R8
.def UMESDEC = R9
.def A_UMIN = R10
.def A_UMINDEC = R11
.def A_UHORA = R12
.def A_UHORADEC = R13		
/*.def UDIA = R8
.def UDIADEC = R9
.def UMES = R6
.def UMESDEC = R7*/


.CSEG
.ORG 0x00
	JMP MAIN
.ORG 0x0006
	JMP ISR_PCINT0
.ORG 0x001A
	JMP ISR_TIMER1
.ORG 0x0020 ; VECTOR DE INTERRUPCION DE TIMER0
	JMP ISR_TIMER0_OVF

MAIN:
//*****************************************************************************
// STACK
//*****************************************************************************
	
	LDI R16, LOW(RAMEND)
	OUT SPL, R16
	LDI R17, HIGH(RAMEND)
	OUT SPH, R17

//*****************************************************************************
// SETUP
//*****************************************************************************
SETUP:

	; ACTIVACION DE PUERTOS TX Y RX 
	LDI R16, 0x00
	STS UCSR0B, R16

	; DECLARACION DE PUERTOS DE SALIDA 
	SBI DDRD, PD7
	SBI DDRD, PD6
	SBI DDRD, PD5
	SBI DDRD, PD4
	SBI DDRD, PD3
	SBI DDRD, PD2
	SBI DDRD, PD1
	SBI DDRD, PD0

	; SALIDA DE TRANSISTORES
	SBI DDRC, PC3
	SBI DDRC, PC2
	SBI DDRC, PC1
	SBI DDRC, PC0

	;leds de estado 
	SBI DDRC, PC5
	SBI DDRC, PC4
	SBI DDRB, PB4
	SBI DDRB, PB5

	; DECLARACION DE PUERTOS DE ENTRADA Y COMO PULL-UPS
	SBI PORTB, PB0
	CBI DDRB, PB0
	SBI PORTB, PB1
	CBI DDRB, PB1
	SBI PORTB, PB2
	CBI DDRB, PB2
	SBI PORTB, PB3
	CBI DDRB, PB3

	; HABILITAR PCINT0 Y PCINT1
	LDI R16, (1 << PCINT3) | (1 << PCINT2) | (1 << PCINT1) | (1 << PCINT0)
	STS PCMSK0, R16
	
	; HABILITAMOS LA ISR PCINT[7:0] 
	LDI R16, (1 << PCIE0)
	STS PCICR, R16
		
	CALL INIT_TIMER1
	CALL INIT_T0

	SEI

	
	CLR R31
	CLR R30
	CLR UMIN
	CLR UMINDEC
	CLR UHORA
	CLR UHORADEC
	CLR R0
	CLR R1
	CLR R2
	CLR R3
	CLR MODO
	CLR MODO2
	LDI R28, 1
	MOV R10, R28
	//.def UDIA = R6
	CLR UDIADEC
	MOV UMES, R28
	//.def UMES = R8
	CLR UMESDEC
	CALL PUNTABMIN
	CALL PUNTABMINDEC
	CALL PUNTABHORA
	CALL PUNTABHORADEC
	CLR R28
	CLR A_UMIN
	CLR A_UMINDEC
	CLR A_UHORA
	CLR A_UHORADEC
	

//*****************************************************************************
// LOOP
//*****************************************************************************
LOOP:
// ESTE ES EL ESTADO 0
// VERIFICAMOS SI EXISTE ALGUNA INTERRUPCION
	

	CPI MODO, 0
	BREQ SEGUIR
	CPI MODO, 1
	BREQ STATE1
	CPI MODO, 2
	BREQ STATE2
	CPI MODO, 3 
	BREQ STATE3_JMP 
	CPI MODO, 4
	BREQ STATE4_JMP 
	CPI MODO, 5 
	BREQ STATE5_JMP 

STATE3_JMP:
	JMP STATE3
STATE4_JMP: 
	JMP STATE4
STATE5_JMP:
	JMP STATE5



SEGUIR:
	CALL DISP
	CPI MODO, 0
	BREQ APAGARSEGUIR
	RJMP SEG

APAGARSEGUIR:
	CBI PORTC, PC4
	CBI PORTC, PC5
	CBI PORTB, PB4
	CBI PORTB, PB5
	RJMP SEG

SEG:
	//SEGUNDOS 
	CPI R31, 10;59   // ACAAAAAAAAAAAAAAAAAAAAAAAAAAA CAMBIAAAAAAAAAAAAAAAAAAA
	BREQ SUMAMIN_JMP
	RJMP LOOP

SUMAMIN_JMP:
	JMP SUMAMIN

REGRESO:
	CPI UMINDEC,6
	BREQ SUMAHORA_JMP
XD:
	CPI UHORADEC, 2
	BREQ H24_JMP
REGRESO1:
	CPI UHORA, 10
	BREQ H10_JMP
REGRESO3:
	RJMP LOOP

SUMAHORA_JMP:
	JMP SUMAHORA
H24_JMP:
	JMP H24
H10_JMP:
	JMP H10

//---------------------------- Estados ----------------------------------------
STATE1: ; CONFIGURAR HORA 
	;CBI PORTD, PD7
	SBI PORTC, PC4
	
	; DECIDIR EL ESTADO DE CADA BOTON 
	CPI MODO2, 0
	BREQ S1_S0
	CPI MODO2, 1
	BREQ S1_S1
	RJMP MOSTRAR
	
	S1_S0:
	CBI PORTB, PB4
	RJMP MOSTRAR
	
	S1_S1:
	SBI PORTB, PB4
	RJMP MOSTRAR



STATE2:
	;SBI PORTD, PD7
	CBI PORTC, PC4
	SBI PORTC, PC5

	CALL PUNTABDIA
	CALL PUNTABDIADEC
	CALL PUNTABMES
	CALL PUNTABMESDEC
	CALL DISP

	
	; LOOP DE ESTADO 2

	
		MOV UDIA, R10
		MOV R28, UDIADEC
		CPI R28, 2
		BREQ FEB
	CON_CAL:
	
		MOV R28, UDIADEC
		CPI R28, 3
		BREQ REVISAR_DIA

		MOV R28, UDIA
		CPI R28, 10
		BREQ D10

		RJMP MOSTRAR_FECHA

	FEB: 
		MOV R28, UDIA
		CPI R28, 10
		BREQ VERIFICAR_MES
		RJMP CON_CAL

	VERIFICAR_MES:
		MOV R28, UMESDEC
		CPI R28, 0
		BREQ CHECK_MES
		RJMP CON_CAL
		

	CHECK_MES:
		MOV R28, UMES
		CPI R28, 2
		BREQ CAMBIO_MES 
		RJMP CON_CAL

	REVISAR_DIA:
		MOV R28, UDIA
		CPI R28, 2
		BREQ CAMBIO_MES 
		RJMP MOSTRAR_FECHA	


	CAMBIO_MES:
		LDI R28, 1
		MOV R10, R28
		MOV UDIA, R28
		CLR UDIADEC
		INC UMES
		MOV R28, UMESDEC
		CPI R28, 1
		BREQ CHECK_YEAR
		MOV R28, UMES
		CPI R28, 10
		BREQ CAMBIO_MESDEC
		RJMP MOSTRAR_FECHA

	CAMBIO_MESDEC:
		INC UMESDEC
		CLR UMES
		RJMP MOSTRAR_FECHA 
	
	CHECK_YEAR:
		MOV R28, UMES
		CPI R28, 2
		BREQ NEW_YEAR
		RJMP MOSTRAR_FECHA
	
	NEW_YEAR:
		LDI R28, 0
		MOV UMESDEC, R28
		LDI R28, 1
		MOV UMES, R28
		RJMP MOSTRAR_FECHA

	D10:
		CLR UDIA
		CLR R10
		INC UDIADEC
		RJMP MOSTRAR_FECHA

	; FIN DE LOOP ESTADO 2
STATE3: 
	;CBI PORTD, PD7
	SBI PORTC, PC4

	CALL PUNTABDIA
	CALL PUNTABDIADEC
	CALL PUNTABMES
	CALL PUNTABMESDEC
	CALL DISP

	CPI MODO2, 0
	BREQ S3_S0
	CPI MODO2, 1
	BREQ S3_S1
	RJMP MOSTRAR

	S3_S0:
		CBI PORTB, PB4
		RJMP MOSTRAR_FECHA 
	S3_S1:
		SBI PORTB, PB4
		RJMP MOSTRAR_FECHA

	JMP MOSTRAR_FECHA

STATE4:
	CBI PORTC, PC4
	CBI PORTC, PC5
	SBI PORTB, PB4


	;SBI PORTD, PD7
	JMP MOSTRAR_ALARMA

STATE5:
	
	SBI PORTC, PC4

	CALL PUNTABMIN
	CALL PUNTABMINDEC
	CALL PUNTABHORA
	CALL PUNTABHORADEC
	CALL DISP

	CP A_UHORADEC, UHORADEC
	BREQ CHECK_HORA_A
	RJMP CONTINUE

CHECK_HORA_A:
	CP A_UHORA, UHORA
	BREQ CHECK_MINDEC_A
	JMP CONTINUE

CHECK_MINDEC_A:
	CP A_UMINDEC, UMINDEC
	BREQ CHECK_MIN_A
	JMP CONTINUE

CHECK_MIN_A:
	CP A_UMIN, UMIN
	BREQ SONAR_ALARMA 
	JMP CONTINUE

SONAR_ALARMA:
	SBI PORTB, PB5
	JMP CONTINUE



CONTINUE:	
	CALL PUNTABMIN
	CALL PUNTABMINDEC
	CALL PUNTABHORA
	CALL PUNTABHORADEC
	CALL DISP
	JMP SEG


//----------------------- SALTOS DE ESTADOS -----------------------------------
MOSTRAR:
	CALL PUNTABMIN
	CALL PUNTABMINDEC
	CALL PUNTABHORA
	CALL PUNTABHORADEC
	CALL DISP
	RJMP LOOP

MOSTRAR_FECHA:
	
	CALL PUNTABDIA
	CALL PUNTABDIADEC
	CALL PUNTABMES
	CALL PUNTABMESDEC
	CALL DISP
	RJMP LOOP

MOSTRAR_ALARMA:
	CALL A4PUNTABMIN
	CALL A4PUNTABMINDEC
	CALL A4PUNTABHORA
	CALL A4PUNTABHORADEC
	CALL DISP 
	RJMP LOOP


//----------------------- SALTOS DEL LOOP -------------------------------------
// SUBRUTINA 1
SUMAMIN:
	CLR R31
	CPI UMIN, 9 
	BREQ CLEARDISP1
	INC UMIN
REGRESO_S1:
	CALL PUNTABMIN
	RJMP REGRESO
CLEARDISP1:
	CLR UMIN
	CALL PUNTABMIN
	INC UMINDEC 
	CALL PUNTABMINDEC
	RJMP REGRESO_S1
// FIN SUBRUTINA 1 

// SUBRUTINA 2
SUMAHORA:
	CLR UMINDEC
	CALL PUNTABMINDEC
	INC UHORA
	CALL PUNTABHORA
	RJMP XD
// FIN SUBRUTINA 2

// SUBRUTINA 3
H10:
	CLR UHORA
	CALL PUNTABHORA
	INC UHORADEC
	CALL PUNTABHORADEC
	RJMP REGRESO3
// FIN SUBRUTINA 3

//SUBRUTINA 4
H24:
	CPI UHORA, 4
	BREQ CLEAN
	RJMP REGRESO1
// FIN SUBRUTINA 4

// SUBRUTINA 5
 CLEAN:
	INC R10
	CLR UHORA
	CALL PUNTABHORA
	CLR UHORADEC 
	CALL PUNTABHORADEC
	CLR UMIN
	CALL PUNTABMIN
	CLR UMINDEC
	CALL PUNTABMINDEC
	RJMP REGRESO3
// FIN SUBRUTINA 5



//*****************************************************************************
// SUB-RUTINAS
//*****************************************************************************
DISP:
// DISP1, MINUTOS 
	;LDI R30, 0b0000_0001

	CBI PORTC, PC3
	SBI PORTC, PC0

	;OUT PORTC, R30
	OUT PORTD, R3
	CALL DELAY 

// DISP2, MINUTOS DECENAS
	;LDI R30, 0b0000_0010

	CBI PORTC, PC0
	SBI PORTC, PC1

	;OUT PORTC, R30
	OUT PORTD, R2
	CALL DELAY

// DISP3, HORAS 
	;LDI R30, 0b0000_0100

	CBI PORTC, PC1
	SBI PORTC, PC2

	;OUT PORTC, R30
	OUT PORTD, R1
	CALL DELAY 

// DISP4, HORAS DECENAS 
	;LDI R30, 0b0000_1000

	CBI PORTC, PC2
	SBI PORTC, PC3

	;OUT PORTC, R30
	OUT PORTD, R0
	CALL DELAY 
	
	RET
 

DELAY:
	CPI R29, 3
	BRNE DELAY
	CLR R29
	RET
//--------------------------------------------------------------
PUNTABMIN:
	LDI ZH, HIGH(TABLA7SEG << 1)
	LDI ZL, LOW (TABLA7SEG << 1)
	ADD ZL, UMIN
	LPM R0, Z ;r2
	RET
PUNTABMINDEC:
	LDI ZH, HIGH(TABLA7SEG << 1)
	LDI ZL, LOW (TABLA7SEG << 1)
	ADD ZL, UMINDEC
	LPM R1, Z ;r3
	RET
PUNTABHORA:
	LDI ZH, HIGH(TABLA7SEG << 1)
	LDI ZL, LOW (TABLA7SEG << 1)
	ADD ZL, UHORA
	LPM R2, Z ;r0
	RET
PUNTABHORADEC:
	LDI ZH, HIGH(TABLA7SEG << 1)
	LDI ZL, LOW (TABLA7SEG << 1)
	ADD ZL, UHORADEC
	LPM R3, Z ;r1
	RET

PUNTABDIA:
	LDI ZH, HIGH(TABLA7SEG << 1)
	LDI ZL, LOW (TABLA7SEG << 1)
	ADD ZL, UDIA
	LPM R2, Z
	RET

PUNTABDIADEC:
	LDI ZH, HIGH(TABLA7SEG << 1)
	LDI ZL, LOW (TABLA7SEG << 1)
	ADD ZL, UDIADEC
	LPM R3, Z
	RET

PUNTABMES:
	LDI ZH, HIGH(TABLA7SEG << 1)
	LDI ZL, LOW (TABLA7SEG << 1)
	ADD ZL, UMES
	LPM R0, Z
	RET

PUNTABMESDEC:
	LDI ZH, HIGH(TABLA7SEG << 1)
	LDI ZL, LOW (TABLA7SEG << 1)
	ADD ZL, UMESDEC
	LPM R1, Z
	RET

A4PUNTABMIN:
	LDI ZH, HIGH(TABLA7SEG << 1)
	LDI ZL, LOW (TABLA7SEG << 1)
	ADD ZL, A_UMIN
	LPM R0, Z ;r2
	RET
A4PUNTABMINDEC:
	LDI ZH, HIGH(TABLA7SEG << 1)
	LDI ZL, LOW (TABLA7SEG << 1)
	ADD ZL, A_UMINDEC
	LPM R1, Z ;r3
	RET
A4PUNTABHORA:
	LDI ZH, HIGH(TABLA7SEG << 1)
	LDI ZL, LOW (TABLA7SEG << 1)
	ADD ZL, A_UHORA
	LPM R2, Z ;r0
	RET
A4PUNTABHORADEC:
	LDI ZH, HIGH(TABLA7SEG << 1)
	LDI ZL, LOW (TABLA7SEG << 1)
	ADD ZL, A_UHORADEC
	LPM R3, Z ;r1
	RET



//*****************************************************************************
// SUBRUTINA PARA EL TIMER0
//*****************************************************************************
INIT_T0:
	LDI R16, (1 << CS02) | (1 << CS00)	; PONEMOS UN PRESCALER DE 1024
	OUT TCCR0B, R16						
		
	LDI R16, 250							; LE CARGAMOS EL VALOR DEL DESBORDAMIENTO
	OUT TCNT0, R16

	LDI R16, (1 << TOIE0)				
	STS TIMSK0, R16						; ACTIVAMOS LA INTERRUPCION DEL TIMER0
	RET


//*****************************************************************************
// SUBRUTINA INIT_TIMER1
//*****************************************************************************

INIT_TIMER1:
	
	LDI R16, HIGH(T1Value)
	STS TCNT1H, R16
	LDI R16, LOW(T1Value)
	STS TCNT1L, R16

	CLR R16
	STS TCCR1A, R16

	LDI R16, (1 << CS12) | (1 << CS10)
	STS TCCR1B, R16

	LDI R16, (1 << TOIE1)
	STS TIMSK1, R16
	RET


//*****************************************************************************
// SUBRUTINA DE TIMER0 OVERFLOW
//*****************************************************************************

ISR_TIMER0_OVF:
	PUSH R16
	IN R16, SREG
	PUSH R16			; GUARDAMOS EN EL SREG LO QUE TIENE EL R16

	LDI R16, 250		; EL VALOR DEL DESBORDAMIENTO
	OUT TCNT0, R16		
	SBI TIFR0, TOV0
; COMIENZA EL LOOP
	
	INC R29

; ACABA EL LOOP
	POP R16
	OUT SREG, R16
	POP R16				;REGRESAMOS LO QUE TIENE EL REGISTRO ANTES DE LA INTERRUPCION
	RETI


//*****************************************************************************
// SUBRUTINA ISR_TIMER1
//*****************************************************************************

ISR_TIMER1: 
	
	PUSH R16
	IN R16, SREG
	PUSH R16

	LDI R16, HIGH(T1Value)
	STS TCNT1H, R16
	LDI R16, LOW(T1Value)
	STS TCNT1L, R16

	SBI TIFR1, TOV1

	// LOOP DE SUBRUTINA 
	INC R31
	INC R30

	POP R16
	OUT SREG, R16
	POP R16
	RETI


//*****************************************************************************
// SUBRUTINA DE ISR INT0
//*****************************************************************************
ISR_PCINT0:
	PUSH R16
	IN R16, SREG
	PUSH R16

	// LOOP DE SUBRUTINAS
	
IN R4, PINB

SBRS R4, 0 	;VERIFY THE STATE OF THE BOTTON 
RJMP BOTON_P	;IF BOTTON WAS PRESSED JUMP TO SOME ACTION 
SBRS R4, 1	; IF BOTTON WASNT PRESSED CHECK ANOTHER BOTTON 
RJMP SELECT_MODE  	; SI ESTE FUE PRESIONADO DEBE SALIR 
SBRS R4, 2	; IF IT WASNT PRESSED CHECK BOTTON 
RJMP SELECT_MODE	; 
SBRS R4, 3	; CHECK AGAIN THE BOTTON 
RJMP SELECT_MODE 
RJMP SALIR

BOTON_P:
	INC MODO
	RJMP SELECT_MODE

SELECT_MODE:

	CPI MODO, 0
	BREQ SALIR_JMP
	CPI MODO, 1
	BREQ ISR_STATE1	; MODIFICAR HORA 
	CPI MODO, 2
	BREQ ISR_STATE2_JMP
	CPI MODO, 3
	BREQ ISR_STATE3_JMP 
	CPI MODO, 4
	BREQ ISR_STATE4_JMP 
	CPI MODO, 5
	BREQ ISR_STATE5_JMP 
	CPI MODO, 6	
	BREQ CLEAR_JMP
	
SALIR_JMP:
	JMP SALIR
ISR_STATE2_JMP:
	JMP ISR_STATE2
ISR_STATE3_JMP:
	JMP ISR_STATE3
ISR_STATE4_JMP:
	JMP ISR_STATE4
ISR_STATE5_JMP:
	JMP ISR_STATE5
CLEAR_JMP:
	JMP CLEAR


; HERE WE START THE FSM 

ISR_STATE1: ; THE MODE BOTTON WAS PRESS SO WE START THE ACTION 

	SBRS R4, 3	; VERIFICAMOS EL ESTADO DEL BOTON DE MODO 
	RJMP BOTON_S1	; SI ESTA PRESIONADO SALTA A BOTON_S	
	RJMP S2_STATE	; SI NO ESTA PRESIONADO SALTO A MINU 
	
BOTON_S1:
	INC MODO2
	RJMP S2_STATE

S2_STATE:
	CPI MODO2, 0
	BREQ ISR_S2_S0
	CPI MODO2, 1
	BREQ ISR_S2_S1
	CPI MODO2, 2
	BREQ CLEAR_S2

CLEAR_S2:
	CLR MODO2
	JMP ISR_S2_S0

ISR_S2_S0:  ;MINUTOS
	JMP MINU

ISR_S2_S1:  ;HORAS
	JMP HORA

MINU:
	SBRS R4, 1 ; VERIFY THE BOTON OF ADD
	RJMP ADDH
	SBRS R4, 2 ; VERIFY THE BOTON OF RES
	RJMP RESH
	RJMP SALIR ; SI NO PASA NADA SALIR DE LA INTERRUPCION
	
	ADDH:
		INC UMIN
		CPI UMIN, 10
		BREQ ADD_UMINDEC
		RJMP SALIR

		ADD_UMINDEC:
			CLR UMIN 
			INC UMINDEC
			CPI UMINDEC, 6
			BREQ CLEAR_MIN
			RJMP SALIR

		CLEAR_MIN:
			CLR UMIN
			CLR UMINDEC
			RJMP SALIR 
RESH:
	CPI UMIN, 0
	BREQ CHECK_00_MIN
	DEC UMIN
	RJMP SALIR

CHECK_00_MIN:
	CPI UMINDEC, 0
	BREQ ES_00
	DEC UMINDEC
	LDI UMIN, 9
	RJMP SALIR 
 
ES_00:
	LDI UMIN, 9
	LDI UMINDEC, 5
	RJMP SALIR

HORA:

	SBRS R4, 1
	RJMP ADD_HORA
	SBRS R4, 2
	RJMP RES_HORA
	RJMP SALIR

ADD_HORA:
	INC UHORA
	CPI UHORADEC, 2
	BREQ CHECK_H24
	CPI UHORADEC, 1
	BREQ CHECK_H10
	CPI UHORADEC, 0
	BREQ FIRST_H10 
	RJMP SALIR
	
FIRST_H10:
	CPI UHORA, 10
	BREQ CHANGE_H
	JMP SALIR 

CHANGE_H:
	CLR UHORA
	INC UHORADEC
	RJMP SALIR 

CHECK_H10:
	CPI UHORA, 10
	BREQ H10_COMPLETE
	RJMP SALIR

H10_COMPLETE:
	CLR UHORA
	INC UHORADEC
	JMP SALIR

	CHECK_H24:
		CPI UHORA, 4
		BREQ H24_COMPLETE
		RJMP SALIR 		
	
	H24_COMPLETE:
		CLR UHORA
		CLR UHORADEC
		JMP SALIR




RES_HORA:
	CPI UHORADEC, 0 
	BREQ CHECK_00
	CPI UHORADEC, 2
	BREQ CHECK_20
	CPI UHORADEC, 1
	BREQ CHECK_10
	
	
	JMP SALIR 
CHECK_10:
	CPI UHORA, 0
	BREQ SHOW_09
	DEC UHORA
	JMP SALIR
	
SHOW_09:
	DEC UHORADEC
	LDI UHORA, 9
	JMP SALIR

CHECK_20:
	CPI UHORA, 0
	BREQ SHOW_19
	DEC UHORA
	RJMP SALIR 
SHOW_19:
	DEC UHORADEC
	LDI UHORA, 9
	JMP SALIR

CHECK_00:
	CPI UHORA, 0 
	BREQ SHOW_23
	DEC UHORA 
	JMP SALIR 

SHOW_23: 
	LDI UHORA, 3
	LDI UHORADEC, 2
	JMP SALIR 
	



ISR_STATE2: // FECHA 
	RJMP SALIR

ISR_STATE3:	// CONFIGURAR FECHA
	
	SBRS R4, 3
	RJMP BOTON_S3
	RJMP S3_STATE

BOTON_S3:
	INC MODO2
	RJMP S3_STATE

S3_STATE:
	CPI MODO2, 0
	BREQ ISR_S3_S0     ;MES 
	CPI MODO2, 1
	BREQ ISR_S3_S1 	   ;DIA 
	CPI MODO2, 2
	BREQ CLEAR_S3

CLEAR_S3:
	CLR MODO2
	JMP ISR_S3_S0

ISR_S3_S0:
	JMP MOD_MES
	JMP SALIR 
ISR_S3_S1:
	JMP MOD_DIA
	JMP SALIR 

MOD_MES:

	;VERIFICAR QUE HACER SI SUMAR O RESTAR 
	SBRS R4, 1
	RJMP ADD_MES
	SBRS R4, 2
	RJMP RES_MES
	JMP SALIR 

ADD_MES:	
	MOV R28, UMESDEC
	CPI R28, 0
	BREQ MES_0X
	MOV R28, UMESDEC
	CPI R28, 1
	BREQ CHECK_1X
	JMP SALIR 

	CHECK_1X:
		MOV R28, UMES 
		CPI R28, 2
		BREQ ENERO_01
		INC UMES
		JMP SALIR 

	ENERO_01:
		CLR UMESDEC
		LDI R28, 1
		MOV UMES, R28
		RJMP SALIR 

	MES_0X:
		MOV R28, UMES 
		CPI R28, 9
		BREQ INCMES_1X
		INC UMES
		JMP SALIR

	INCMES_1X:
		INC UMESDEC
		CLR UMES
		JMP SALIR 
RES_MES:
	MOV R28, UMESDEC
	CPI R28, 0
	BREQ RMES_0X
	MOV R28, UMESDEC
	CPI R28, 1
	BREQ RCHECK_1X
	JMP SALIR 

	RMES_0X:
		MOV R28, UMES
		CPI R28, 1
		BREQ DICIEMBRE_12
		DEC UMES
		JMP SALIR 
		
		DICIEMBRE_12:
			LDI R28, 1
			MOV UMESDEC, R28
			LDI R28, 2
			MOV UMES, R28
			JMP SALIR
	RCHECK_1X:
		MOV R28, UMES 
		CPI R28, 0
		BREQ SEPTIEMBRE_09
		DEC UMES 
		JMP SALIR 

		SEPTIEMBRE_09:
			CLR UMESDEC
			LDI R28, 9
			MOV UMES, R28
			JMP SALIR 

MOD_DIA:
	;VERIFICAR QUE HACER SI SUMAR O RESTAR 
	SBRS R4, 1
	RJMP ADD_DIA
	SBRS R4, 2
	RJMP RES_DIA
	JMP SALIR


ADD_DIA:
	MOV R28, UDIADEC
	CPI R28, 3
	BREQ CHECK_3X
	MOV R28, UDIADEC
	CPI R28, 2
	BREQ CHECK_2X
	MOV R28, UDIADEC 
	CPI R28, 1
	BREQ CHECK_1X2
	MOV R28, UDIADEC
	CPI R28, 0
	BREQ CHECK_0X
	RJMP SALIR 


	CHECK_0X:
		MOV R28, UDIA 
		CPI R28, 9
		BREQ SHOW_10
		INC UDIA 
		JMP SALIR 

SHOW_10:
	LDI R28, 1
	MOV UDIADEC, R28
	CLR UDIA
	JMP SALIR
	

	CHECK_1X2:
		MOV R28, UDIA 
		CPI R28, 9
		BREQ SHOW_20
		INC UDIA 
		RJMP SALIR 
SHOW_20:
	LDI R28, 2
	MOV UDIADEC, R28
	CLR UDIA
	RJMP SALIR
		

	CHECK_3X:
		MOV R28, UDIA 
		CPI R28, 0
		BREQ CHECK_MES_30
		
		MOV R28, UDIA 
		CPI R28, 1
		BREQ SHOW_01       // SETEAR EL DIA 01
		
		INC UDIA 
		JMP SALIR 
	CHECK_2X:
		MOV R28, UDIA 
		CPI R28, 9
		BREQ CHECK_MES_29	
		INC UDIA
		;RJMP SHOW_30
		JMP SALIR 
SHOW_30:
	CLR UDIA
	LDI R28, 3
	MOV UDIADEC, R28
	JMP SALIR

SHOW_01:
	CLR UDIADEC
	LDI R28, 1
	MOV UDIA, R28
	RJMP SALIR

CHECK_MES_29:
	MOV R28, UMESDEC
	CPI R28, 0
	BREQ CHECK_FEBRERO
	JMP SHOW_30
	RJMP SALIR 

CHECK_FEBRERO:
	MOV R28, UMES
	CPI R28, 2
	BREQ ISR_MES_29
	JMP SHOW_30

CHECK_MES_30:
	MOV R28, UMESDEC
	CPI R28, 0
	BREQ CHECK_MES_0X
	MOV R28, UMESDEC
	CPI R28, 1
	BREQ CHECK_MES_1X
	RJMP SALIR 

CHECK_MES_1X:
	MOV R28, UMES
	CPI R28, 0
	BREQ ISR_MES_31
	MOV R28, UMES
	CPI R28, 1
	BREQ ISR_MES_30
	MOV R28, UMES
	CPI R28, 2
	BREQ ISR_MES_31
	JMP SALIR 

CHECK_MES_0X:
	MOV R28, UMES
	CPI R28, 1
	BREQ ISR_MES_31
	MOV R28, UMES
	CPI R28, 2
	BREQ ISR_MES_29
	MOV R28, UMES
	CPI R28, 3
	BREQ ISR_MES_31
	MOV R28, UMES
	CPI R28, 4
	BREQ ISR_MES_30
	MOV R28, UMES
	CPI R28, 5
	BREQ ISR_MES_31
	MOV R28, UMES
	CPI R28, 6
	BREQ ISR_MES_30
	MOV R28, UMES
	CPI R28, 7
	BREQ ISR_MES_31
	MOV R28, UMES
	CPI R28, 8
	BREQ ISR_MES_31
	MOV R28, UMES
	CPI R28, 9
	BREQ ISR_MES_30
	JMP SALIR 

ISR_MES_30:
	CLR UDIADEC
	LDI R28, 1
	MOV UDIA, R28
	RJMP SALIR 

ISR_MES_31:
	INC UDIA
	RJMP SALIR 

ISR_MES_29:
	CLR UDIADEC
	LDI R28, 1
	MOV UDIA, R28
	RJMP SALIR

RES_DIA:

	MOV R28, UDIADEC
	CPI R28, 3
	BREQ CHECK_30
	MOV R28, UDIADEC
	CPI R28, 2
	BREQ CHECK_20_2
	MOV R28, UDIADEC 
	CPI R28, 1
	BREQ CHECK_10_2
	MOV R28, UDIADEC
	CPI R28, 0
	BREQ CHECK_01_2
	RJMP SALIR 
	
CHECK_30:
	MOV R28, UDIA 
	CPI R28, 0
	BREQ SHOW_29		
	DEC UDIA 
	JMP SALIR 

SHOW_29:
	LDI R28, 2
	MOV UDIADEC, R28
	LDI R28, 9 
	MOV UDIA, R28
	JMP SALIR

CHECK_20_2:
	MOV R28, UDIA 
	CPI R28, 0 
	BREQ SHOW_19_2
	DEC UDIA
	JMP SALIR

SHOW_19_2:
	LDI R28, 1
	MOV UDIADEC, R28
	LDI R28, 9 
	MOV UDIA, R28
	JMP SALIR

CHECK_10_2:
	MOV R28, UDIA 
	CPI R28, 0
	BREQ SHOW_09_2		
	DEC UDIA 
	JMP SALIR 

SHOW_09_2:
	LDI R28, 0
	MOV UDIADEC, R28
	LDI R28, 9 
	MOV UDIA, R28
	JMP SALIR

CHECK_01_2:
	MOV R28, UDIA 
	CPI R28, 1
	BREQ RCHECK_MES		
	DEC UDIA 
	JMP SALIR

RCHECK_MES:
	MOV R28, UMESDEC
	CPI R28, 0
	BREQ RCHECK_MES_0X
	MOV R28, UMESDEC
	CPI R28, 1
	BREQ RCHECK_MES_1X
	JMP SALIR 

RCHECK_MES_1X:
	MOV R28, UMES
	CPI R28, 0
	BREQ R_ISR_MES_31
	MOV R28, UMES
	CPI R28, 1
	BREQ R_ISR_MES_30
	MOV R28, UMES
	CPI R28, 2
	BREQ R_ISR_MES_31
	JMP SALIR

RCHECK_MES_0X:
	MOV R28, UMES
	CPI R28, 1
	BREQ R_ISR_MES_31
	MOV R28, UMES
	CPI R28, 2
	BREQ R_ISR_MES_29
	MOV R28, UMES
	CPI R28, 3
	BREQ R_ISR_MES_31
	MOV R28, UMES
	CPI R28, 4
	BREQ R_ISR_MES_30
	MOV R28, UMES
	CPI R28, 5
	BREQ R_ISR_MES_31
	MOV R28, UMES
	CPI R28, 6
	BREQ R_ISR_MES_30
	MOV R28, UMES
	CPI R28, 7
	BREQ R_ISR_MES_31
	MOV R28, UMES
	CPI R28, 8
	BREQ R_ISR_MES_31
	MOV R28, UMES
	CPI R28, 9
	BREQ R_ISR_MES_30
	JMP SALIR 


R_ISR_MES_31:
	LDI R28, 3
	MOV UDIADEC, R28
	LDI R28, 1
	MOV UDIA, R28
	JMP SALIR

R_ISR_MES_30:
	LDI R28, 3
	MOV UDIADEC, R28
	LDI R28, 0
	MOV UDIA, R28
	JMP SALIR

R_ISR_MES_29:
	LDI R28, 2
	MOV UDIADEC, R28
	LDI R28, 9
	MOV UDIA, R28
	JMP SALIR 

ISR_STATE4:
	SBRS R4, 3	; VERIFICAMOS EL ESTADO DEL BOTON DE MODO 
	RJMP A4BOTON_S1	; SI ESTA PRESIONADO SALTA A BOTON_S	
	RJMP A4S2_STATE	; SI NO ESTA PRESIONADO SALTO A MINU 
	
A4BOTON_S1:
	INC MODO2
	RJMP A4S2_STATE

A4S2_STATE:
	CPI MODO2, 0
	BREQ A4ISR_S2_S0
	CPI MODO2, 1
	BREQ A4ISR_S2_S1
	CPI MODO2, 2
	BREQ A4CLEAR_S2

A4CLEAR_S2:
	CLR MODO2
	JMP A4ISR_S2_S0

A4ISR_S2_S0:  ;MINUTOS
	JMP A4MINU

A4ISR_S2_S1:  ;HORAS
	JMP A4HORA

A4MINU:
	SBRS R4, 1 ; VERIFY THE BOTON OF ADD
	RJMP A4ADDH
	SBRS R4, 2 ; VERIFY THE BOTON OF RES
	RJMP A4RESH
	RJMP SALIR_ISR ; SI NO PASA NADA SALIR_ISR DE LA INTERRUPCION
	
	A4ADDH:
		INC A_UMIN
		MOV R28, A_UMIN
		CPI R28, 10
		BREQ A4ADD_UMINDEC
		RJMP SALIR_ISR

		A4ADD_UMINDEC:
			CLR A_UMIN 
			INC A_UMINDEC
			MOV R28, A_UMINDEC
			CPI R28, 6
			BREQ A4CLEAR_MIN
			RJMP SALIR_ISR

		A4CLEAR_MIN:
			CLR A_UMIN
			CLR A_UMINDEC
			RJMP SALIR_ISR 
A4RESH:
	MOV R28, A_UMIN
	CPI R28, 0
	BREQ A4CHECK_00_MIN
	DEC A_UMIN
	RJMP SALIR_ISR

A4CHECK_00_MIN:
	MOV R28, A_UMINDEC
	CPI R28, 0
	BREQ A4ES_00
	DEC A_UMINDEC
	LDI R28, 9
	MOV A_UMIN, R28
	RJMP SALIR_ISR 
 
A4ES_00:
	LDI R28, 9
	MOV A_UMIN, R28
	LDI R28, 5
	MOV A_UMINDEC, R28
	RJMP SALIR_ISR

A4HORA:

	SBRS R4, 1
	RJMP A4ADD_HORA
	SBRS R4, 2
	RJMP A4RES_HORA
	RJMP SALIR_ISR

A4ADD_HORA:
	INC A_UHORA
	MOV R28, A_UHORADEC
	CPI R28, 2
	BREQ A4CHECK_H24
	MOV R28, A_UHORADEC
	CPI R28, 1
	BREQ A4CHECK_H10
	MOV R28, A_UHORADEC
	CPI R28, 0
	BREQ A4FIRST_H10 
	RJMP SALIR_ISR
	
A4FIRST_H10:
	MOV R28, A_UHORA
	CPI R28, 10
	BREQ A4CHANGE_H
	JMP SALIR_ISR 

A4CHANGE_H:
	CLR A_UHORA
	INC A_UHORADEC
	RJMP SALIR_ISR 

A4CHECK_H10:
	MOV R28, A_UHORA
	CPI R28, 10
	BREQ A4H10_COMPLETE
	RJMP SALIR_ISR

A4H10_COMPLETE:
	CLR A_UHORA
	INC A_UHORADEC
	JMP SALIR_ISR

	A4CHECK_H24:	
		MOV R28, A_UHORA
		CPI R28, 4
		BREQ A4H24_COMPLETE
		RJMP SALIR_ISR 		
	
	A4H24_COMPLETE:
		CLR A_UHORA
		CLR A_UHORADEC
		JMP SALIR_ISR




A4RES_HORA:
	MOV R28, A_UHORADEC
	CPI R28, 0 
	BREQ A4CHECK_00
	MOV R28, A_UHORADEC
	CPI R28, 2
	BREQ A4CHECK_20
	MOV R28, A_UHORADEC
	CPI R28, 1
	BREQ A4CHECK_10
	
	
	JMP SALIR_ISR 
A4CHECK_10:
	MOV R28, A_UHORA
	CPI R28, 0
	BREQ A4SHOW_09
	DEC A_UHORA
	JMP SALIR_ISR
	
A4SHOW_09:
	DEC A_UHORADEC
	LDI R28, 9
	MOV A_UHORA, R28
	JMP SALIR_ISR

A4CHECK_20:
	MOV R28, A_UHORA
	CPI R28, 0
	BREQ A4SHOW_19
	DEC A_UHORA
	RJMP SALIR_ISR 
A4SHOW_19:
	DEC A_UHORADEC
	LDI R28, 9
	MOV A_UHORA, R28
	JMP SALIR_ISR

A4CHECK_00:
	MOV R28, A_UHORA
	CPI R28, 0 
	BREQ A4SHOW_23
	DEC A_UHORA 
	JMP SALIR_ISR 

A4SHOW_23: 
	LDI R28, 3
	MOV A_UHORA, R28
	LDI R28, 2
	MOV A_UHORADEC, R28
	JMP SALIR_ISR 


SALIR_ISR:
	/*MOV UMIN, A_UMIN
	MOV UMINDEC, A_UMINDEC
	MOV UHORA, A_UHORA
	MOV UHORADEC, A_UHORADEC*/
	RJMP SALIR 

	
ISR_STATE5:
	JMP SALIR 

CLEAR: 
	CLR MODO
	RJMP SALIR 



SALIR:	



	// FIN DE LOOP DE SUBRUTINAS 
	POP R16
	OUT SREG, R16
	POP R16
	RETI

//*****************************************************************************
// TABLA DE VALORES
//*****************************************************************************
TABLA7SEG: .DB/*0*/ 0x3F,/*1*/ 0x06,/*2*/ 0x5B,/*3*/ 0x4F,/*4*/ 0x66,/*5*/ 0x6D,/*6*/ 0x7D,/*7*/ 0x07,/*8*/ 0x7F,/*9*/ 0x6F


